#!/usr/bin/perl
# -*- mode: perl; buffer-file-coding-system: utf-8 -*-
# make_html_index.pl                   falk@gurumusch
#                    30 Mär 2020

use warnings;
use strict;
use English;

use Data::Dumper;
use Carp;
use Carp::Assert;

use Pod::Usage;
use Getopt::Long;

use utf8;

=head1 NAME

make_html_index.pl

=head1 USAGE

   perl make_html_index.pl --gourmet_index=index.htm --json=recipes.json

=head1 DESCRIPTION

Generates a new html index by combining the index file produced by
gourmet html export and a json array containing the gourmet db
entries.

The generated html index is used, together with the exported html
files and the json structure to provide a simple searchable web
interface to the exported recipes.

The generated index is written to STDOUT

=head1 REQUIRED ARGUMENTS

=head1 OPTIONS

=over 2

=item gourmet_index, required

C<index.htm>, the html index file generated by the gourmet export to
html utility

=item json, required

The json (array) structure containing the gourmet db entries
(recipies). The format is as follows:

[
  { 
    "id":"1",
    "title":"<a href='Potato and Leek Frittata Recipe1.htm'>Potato and Leek Frittata Recipe</a>",
    ...
  },
  ...
]

=back

=cut


my %opts = (
  'gourmet_index' => '',
  'json' => ''
  );

my @optkeys = (
  'gourmet_index=s',
  'json=s'
	      );

unless (GetOptions (\%opts, @optkeys)) { pod2usage(2); };

print STDERR "Options:\n";
print STDERR Dumper(\%opts);

use List::MoreUtils qw(all);

my @required = ('gourmet_index', 'json');

unless (all { $opts{$_} } @required) { pod2usage(2) };
#unless (@ARGV) { pod2usage(2) }; 


binmode(STDERR, 'encoding(UTF-8)');
#binmode(STDOUT, 'encoding(UTF-8)');


use XML::LibXML '1.70';

my $gourmet_dom = XML::LibXML->load_html(location => $opts{gourmet_index});

my $table_div = ($gourmet_dom->findnodes( '//div[@class="index"]' ))[0];
# print $table_div->toString();

my $dom = XML::LibXML->createDocument( "1.0", "UTF-8" );
my $html = $dom->createElement('html');
$html->setAttribute( 'xmnls', "http://www.w3.org/1999/xhtml" );
$dom->setDocumentElement($html);

my $head = $dom->createElement('head');
my $title = $dom->createElement('title');
my $title_text_string = 'Recipe Index';
my $title_text = $dom->createTextNode($title_text_string);
$title->addChild($title_text);
$head->addChild($title);

my $meta = $dom->createElement('meta');
$meta->setAttribute('http-equiv', 'Content-Type');
$meta->setAttribute('content', 'text/html;charset=utf-8');
$head->addChild($meta);

$meta = $dom->createElement('meta');
$meta->setAttribute('name', 'viewport');
$meta->setAttribute('content', 'initial-scale=1.0, maximum-scale=1.0, width=device-width, user-scalable=no');
$head->addChild($meta);

foreach my $script_src ('https://ajax.googleapis.com/ajax/libs/jquery/2.1.4/jquery.min.js', 'fraction-0.3.js', 'code.js') {
  my $script = $dom->createElement('script');
  $script->setAttribute('src', $script_src);
  $script->appendText(' ');
  $head->addChild($script);
}

my $link = $dom->createElement('link');
my %atts = (	 
  'href' => 'https://fonts.googleapis.com/css?family=Lato:400,900',
  'rel' => 'stylesheet',
  'type' => 'text/css'
  );
while (my ($att, $val) = each %atts) {
  $link->setAttribute($att, $val);
       };
$head->addChild($link);

$link = $dom->createElement('link');
%atts = (
	 'href' => 'styles.css',
	 'rel' => 'stylesheet',
	 'type' => 'text/css',
	 'media' => 'screen'
  );

while (my ($att, $val) = each %atts) {
  $link->setAttribute($att, $val);
};
$head->addChild($link);

$html->addChild($head);

##### body

my $body = $dom->createElement('body');

### google suchfeld
my $div = $dom->createElement('div');
my $script = $dom->createElement('script');
$script->setAttribute('async');
$script->setAttribute('src', 'https://cse.google.com/cse.js?cx=012096429303056873661:oh8z6dkzwhy');
$script->appendText(' ');
$div->addChild($script);
my $sdiv = $dom->createElement('div');
$sdiv->setAttribute('class', 'gcse-search');
$div->addChild($sdiv);
$body->addChild($div);

my $header = $dom->createElement('header');
$header->appendText('Rezept Liste');
$body->addChild($header);

### link zur alphabetischen Liste
$div = $dom->createElement('div');
$div->setAttribute('style', 'text-align:center;margin-bottom:25px');
my $a = $dom->createElement('a');
$a->setAttribute('href', '#alphabetisch');
$a->appendText('Zur alphabetisch sortierten Liste');
$div->addChild($a);
$body->addChild($div);

### js Zeug für webgourmet Suche
$div = $dom->createElement('div');
$div->setAttribute('id', 'recipelist');

$sdiv = $dom->createElement('div');
$sdiv->setAttribute('style', 'text-align:center;');
my $input = $dom->createElement('input');
%atts = (
  'type' => 'text',
  'id' => 'filter',
  'placeholder' => 'Filter...',
  );
while (my ($key, $val) = each %atts) {
  $input->setAttribute($key, $val);
};
$sdiv->addChild($input);
$div->addChild($sdiv);

my $dl = $dom->createElement('dl');
$dl->setAttribute('class', 'recipelist');
$div->addChild($dl);

$body->addChild($div);

$html->addChild($body);

print $dom->serialize(1);

#print $gourmet_dom->toStringHTML();

1;





__END__

=head1 EXIT STATUS

=head1 CONFIGURATION

=head1 DEPENDENCIES

=head1 INCOMPATIBILITIES

=head1 BUGS AND LIMITATIONS

created by template.el.

It looks like the author of this script was negligent
enough to leave the stub unedited.


=head1 AUTHOR

Ingrid Falk, E<lt>E<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2020 by Ingrid Falk

This program is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.2 or,
at your option, any later version of Perl 5 you may have available.

=head1 BUGS

None reported... yet.

=cut
